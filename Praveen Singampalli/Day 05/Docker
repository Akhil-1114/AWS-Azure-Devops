Docker

01.) Pipeline was failing at docker stage

02.) Code was passing through multiple tools in the pipeline and failing at docker

03.) Docker is a jar file which has been converted to an image and to an container

04.) Java code of 10gb is converted into a jar which contains all the applications, files, modules, library, dependencies

05.) Java code is converted into jar with the help of maven

06.) Deploy the jar in 2 servers where each server is raising with 10k requests per second.

07.) To overcome scalability of servers we come up with containers defined with id, size, os flavours, price, reciept(docker file (image)), stored properly, security, proper isolation, reliability

08.) Jar is converted into a container

09.) Docker file(image) contains name of the person, commands, expose, run, copy, cmd, entrypoint, size, time and date, type, location, quality, ID

10.) Docker file is used to convert jar into an image and converted into container

11.) Image is transferred with the help of jfrog or dockerhub

12.) 5 main components of docker architecture

13.) Client, Daemon, Registry, Image, Container

14.) Client is a black terminal cmd prompt where commands provided are converted into container

15.) Commands provided in docker client are communicating in Docker software (docker host) having daemons

16.) Daemon handles processes for application to be running in the background

17.) client level docker build convert dockerfile into an image by communicating with docker daemon

18.) client level docker pull from registry of jfrog or dockerhub to laptop by communicating with docker daemon

19.) client level docker run will convert image to container by communicating with docker daemon

20.) Docker depends on docker file

21.) we had a file converted into jar using maven 

22.) When we get requests from testers or developers we have to create jenkins file then docker file and kubernetes manifest file

23.) https://github.com/praveen1994dec/Java_app_3.0

24.) Docker file is a set of instructions to docker what to do

25.) Scale 1 linux server to 100 linux servers in form of containers using docker file

26.) When connected to vpn we connect to client network which can be done using virtualization

27.) 1st ec2 10gb ram 100gb hard disk

28.) 1st ec2 to be converted to 10 containers using required resources and cgroups

29.) Ec2 server is parent having child ec2 servers called containers and containers should be having some inheritance from parent which are provided by resources

30.) resource allocation are done with the help of cgroups

31.) 1 container having 1 server should also have os is defined using command "FROM"

32.) Since it is java file we define using "openjdk:8-jdk-alpine(os)"

33.) Step 31 and 32 combined define "FROM openjdk:8-jdk-alpine(os)"

34.) When we install os we need to install dependencies when the container is getting ready "RUN sudo apt install jenkins"

35.) Moving to the directory we are working on "WORKDIR"

36.) Define the path "/app"

37.) step 34 and 35 combined define "WORKDIR /app"

38.) copy the file converted to jar file using mvn clean install from local to container using command "COPY"

39.) since it is jar file we define using "./target/*.jar /app.jar"

40.) step 37 and 38 combined define "COPY ./target/*.jar /app.jar"

41.) Start the application "CMD" execute and start application in container

42.) for any jar application to run "["java", "-jar", "/app.jar"]" (java -jar agent.jar)

43.) step 37 and 38 combined define "CMD ["java", "-jar", "/app.jar"]"

44.) Expose 8080 to be run when working on any tool

45.) ADD will be used with zip file

46.) Make the application run, up after container created use command cmd ["p1","p2"] with parameters

47.) Make the application start after container created use command entrypoint [ ] without parameters

