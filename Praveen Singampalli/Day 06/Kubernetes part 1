Kubernetes part 1

01.) even though we have docker for shipping jars or artifacts into containers and shipping to different kinds of systems

02.) Scaling of containers in 2016 came docker swarm to scale containers as per requirement 1 container to 2 to 5 to 10
     containers as per requirement

03.) Docker swarm was providing scaling mechanism with issue there should be person continuously monitoring scaling
     of containers, security of scaled containers attach one more docker container everything should be manually checked by some person

04.) Running flipkart application where data is stored on docker containers if an error is unchecked during manual
     checking flipkart application will be down to resolve issue it introduced kubernetes

05.) Kubernetes solved the problem of human interference by managing itself

06.) Dynamic scaling, reliability, autofunctionality, container management, auto security, auto healing,
     networking, health checks, resource management, balancing of load, worker nodes, replications

07.) Dynamic scaling - as per the load scaling happens.Scaling is directly proportional to incoming load on the system

08.) reliability - how the system is up 24/7, 365 days 99.999999999 application will be up and running

09.) autofunctionality - supports automation scripts
     
10.) container management - kubernetes will specifically takes care of container management

11.) Kubernetes is entirely built on docker

12.) Docker is the underlying architecture for kubernetes

13.) What ever features docker was not providing are given by kubernetes

14.) auto security - Kubernetes has the best functionality of implementing RBAC providing its own security rules managing
     its entire peoples access roles

15.) Networking - we have multiple layers of networks in kubernetes

16.) What kind of layers CALICO in kubernetes there is a seperate plugin architecture called CALICO which is a plugin
     of network in kubernetes. kubernetes supports networking with various kinds of plugins 

17.) health checks - when ever we have App1 and App2 deployed kubernetes performs automatic health checks. If
     any application is down it will create App3 and trigger the traffic

18.) Resource management - checks health and if any issue remove the complete state of the application structure
     and create new application

19.) Kubernetes has a dashboard

20.) Docker was managed by person

21.) kubernetes is not managed by person

22.) architecture of kubernetes

23.) 4 rule theory in kubernetes

24.) jenkins has jenkins file

25.) docker has docker file

26.) kubernetes has manifest YAML file

27.) code written will be in manifest YAML file

28.) Kubernetes has a master slave concept similary as jenkins has a master slave concept 

29.) when ever we install kubernetes on the cloud first the kubernetes gives us master node as well as worker node

30.) worker node are purely dependent on the input

31.) wanted to create 2 laptops can be done using master

32.) devops engineer talking with kubernetes using manifest YAML file

33.) YAML is a plain syntax file having key value

34.) YAML is simple to understand

35.) Concept of API api/v3 internal teams will use it

36.) devops engineer talks with kubernetes using manifest YAML file and YAML file consists of APIs

37.) Kubernetes talk with YAML file using APIs

38.) In this world every data is transferred using API

39.) When talking with kubernetes need server which will interact with API

40.) need server to read incoming data

41.) Master node is considered as Front end application

42.) Front end application is a API server which read incoming data and process and transfer to backend (master node)

43.) Need to store incoming data which can be done using database server called as ETCD database (master nodes)

44.) YAML is a key value file hence database also store key value data

45.) what ever YAML file has will be stored in database in key value format

46.) Whatever it is happening in master or worker node data is stored on database server

47.) Control manager known as brain of application present on master node (master node)

48.) Control manager manages worker nodes, replications, all features of kubernetes

49.) Scheduler according to timetable of kubernetes will do deployments on worker nodes (master node)

50.) in kubernetes deployments never happen on master nodes deployments happedn on worker nodes

51.) 4 rule theory is applicable on worker node

52.) what ever worker node does everything is taken and given by api server

53.) every data is incoming on to api server and bidirectional flow of data with api server

54.) 4 components of workernodes pod, kubelet, containerruntime, kubeproxy,

55.) pod - in container we place the jar and container is placed in pod

56.) java file was converted to jar using maven tool

57.) image was converted to container using docker

58.) pod is provided by kubernetes and all features of kubernetes are provided by pod layer

60.) pod is smallest unit or function or item in kubernetes creating imaginary layer on container protecting
     our container like wrapper to make it safe packed

61.) pod has a container having jar in the container

62.) what ever kubernetes does are done on pod itself

63.) in pod we can have multiple containers but containers never have pod

64.) Kubelet - worker node should talk with master can be done using kubelet

65.) what ever worker node does should be known to master which can be done using kubelet

66.) kubelet acts as an agent working with worker node and master and updates everything to master

67.) all the information passed by kubelet is stored in master etcd

68.) container runtime above every jar there is container and above every container there is pod and
     kubernetes identifies issues inside the pod using container runtime which helps in monitoring containers inside the pod

69.) container runtime talks with kubelet which talks with api server which talks with control management which
     talks with scheduler and scheduler will schedule new pod

70.) container runtime maintains cpu, memory, os, health of pods having containers

71.) kube proxy worker node having pods and if wanted to maintain network between pods or outside world with the
     pods can be done using kube proxy making sure everything is secured

72.) kube proxy acts as firewall

73.) YAML is defined as a manifest file

74.) Docker image was pushed to docker registry i.e docker hub

75.) Create a pod where kubernetes will read the docker image from docker registry and YAML file will convert
     docker image to pod

76.) some companies use jfrog to store docker images and some companies use docker hub to store docker images
     some companies use nexus to store docker images

77.) 4 rule theory in YAML manifest file

78.) apiversion, kind, metadata, spec

79.) master node has api server and when ever you want to talk with api server write command apiversion : api/v3

80.) api version keeps on changing

81.) without apiversion : api/v3 will not talk with api server

82.) kind is case sensitive

83.) ordering kind of sweets going to sweet shop using YAML file

84.) pod

85.) config map (store secret data)

86.) service

87.) deployment

88.) replicaset (your own similar duplicate character)

89.) RBAC

90.) KIND:service helps to create loadbalancer, CNAME, nodeport, clusterip

91.) loadbalancer having 2 pods and have loadbalancer between 2 pods using
     KIND:service
     type:loadbalancer

92.) CNAME kubernetes wants to create own domain name using
     KIND:service
     type:CNAME

93.) nodeport external communication created using nodeport where port is 30000+ which acts as an entry point to
     worker node 
     KIND:service
     type:CNAME

94.) all applications are talking on port only when ever a pod is deployed create nodeport to make sure
     external communications happen on worker node

95.) ClusterIP - cluster is a combination of multiple nodes workernodes

96.) 2 cluster communication can be done using clusterip

91.) nodeport is for 1 worker node

92.) metadata is used to whenever creating pod some name to be assigned to pod with container in it

93.) Spec container name, image, nodeport, port, container port will be provided here as specifications

94.) in kubernetes there is volumes called as persistent volumes pv and pvc

95.) in kubernetes from available volume create and attach persistent volume to pods

96.) in kubernetes PVC claim will define how much size you are expecting from kubernetes cluster

97.) volumes are taken from kubernetes

98.) There are multiple free tools to create kubernetes minikube, rancher, amazon eks, amazon aks

99.) selector when ever creating a pod usually what ever specifications to which pod it should be attached is done
     by selector

100.) selector acts a mapping defining which pod the particular specification will be applied to

101.) kubernetes mandates that for every pod there should be a service

102.) 1 file of kubernetes has kind of pod and kind of deployment

103.) deployment is more powerful than pod since in deployment we can provide replicas

104.) attach the deployment with the pod with the help of selector

105.) parent specification is for pod

106.) child specification is for container

107.) kubernetes gives automated health checks using livenessProbe:

108.) minikube a software/platform which provides free kubernetes setup

109.) Conntrack a software/platform which helps kubernetes run

110.) every software goes to bin folder

111.) port forwarding will listen to a port and forward that request to another port

112.) In real time EKS will be used



